// Generated by gencpp from file gaze_tracking/gazedata.msg
// DO NOT EDIT!


#ifndef GAZE_TRACKING_MESSAGE_GAZEDATA_H
#define GAZE_TRACKING_MESSAGE_GAZEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gaze_tracking
{
template <class ContainerAllocator>
struct gazedata_
{
  typedef gazedata_<ContainerAllocator> Type;

  gazedata_()
    : BPOGX(0.0)
    , BPOGY(0.0)
    , BPOGV(0.0)  {
    }
  gazedata_(const ContainerAllocator& _alloc)
    : BPOGX(0.0)
    , BPOGY(0.0)
    , BPOGV(0.0)  {
  (void)_alloc;
    }



   typedef float _BPOGX_type;
  _BPOGX_type BPOGX;

   typedef float _BPOGY_type;
  _BPOGY_type BPOGY;

   typedef float _BPOGV_type;
  _BPOGV_type BPOGV;





  typedef boost::shared_ptr< ::gaze_tracking::gazedata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gaze_tracking::gazedata_<ContainerAllocator> const> ConstPtr;

}; // struct gazedata_

typedef ::gaze_tracking::gazedata_<std::allocator<void> > gazedata;

typedef boost::shared_ptr< ::gaze_tracking::gazedata > gazedataPtr;
typedef boost::shared_ptr< ::gaze_tracking::gazedata const> gazedataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gaze_tracking::gazedata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gaze_tracking::gazedata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gaze_tracking::gazedata_<ContainerAllocator1> & lhs, const ::gaze_tracking::gazedata_<ContainerAllocator2> & rhs)
{
  return lhs.BPOGX == rhs.BPOGX &&
    lhs.BPOGY == rhs.BPOGY &&
    lhs.BPOGV == rhs.BPOGV;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gaze_tracking::gazedata_<ContainerAllocator1> & lhs, const ::gaze_tracking::gazedata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gaze_tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gaze_tracking::gazedata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gaze_tracking::gazedata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gaze_tracking::gazedata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gaze_tracking::gazedata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaze_tracking::gazedata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaze_tracking::gazedata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gaze_tracking::gazedata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c468a841b881d4bc2e7c92a6284034c6";
  }

  static const char* value(const ::gaze_tracking::gazedata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc468a841b881d4bcULL;
  static const uint64_t static_value2 = 0x2e7c92a6284034c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::gaze_tracking::gazedata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gaze_tracking/gazedata";
  }

  static const char* value(const ::gaze_tracking::gazedata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gaze_tracking::gazedata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 BPOGX\n"
"float32 BPOGY\n"
"float32 BPOGV\n"
;
  }

  static const char* value(const ::gaze_tracking::gazedata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gaze_tracking::gazedata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.BPOGX);
      stream.next(m.BPOGY);
      stream.next(m.BPOGV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gazedata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gaze_tracking::gazedata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gaze_tracking::gazedata_<ContainerAllocator>& v)
  {
    s << indent << "BPOGX: ";
    Printer<float>::stream(s, indent + "  ", v.BPOGX);
    s << indent << "BPOGY: ";
    Printer<float>::stream(s, indent + "  ", v.BPOGY);
    s << indent << "BPOGV: ";
    Printer<float>::stream(s, indent + "  ", v.BPOGV);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZE_TRACKING_MESSAGE_GAZEDATA_H
